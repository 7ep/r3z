Developer handbook
==================

    Behavior-Driven Development (BDD)
    ---------------------------------

    BDD files will have a suffix of "BDD".  See "EnteringExpensesBDD" for a sample.


    Test Helpers
    ------------

    When writing tests, you might find some of the functions in TestHelpers.kt handy


    Performance
    -----------

    Performance tests include the text "PERFORMANCE" in the name


    Wrapping exceptions
    -------------------

    As we code, we encounter many places where exceptions can be thrown. Often,
    in the case of third-party code, the exception may be confusing, ambiguous,
    too-universal, or include critical information in a overly-complex stacktrace.

    To avoid the difficulty this causes during maintenance and debugging, it is
    imperative we wrap potential exception throwers in our own handling code
    where we can more-precisely describe the problem.

    For an example, see [parsePostedData]


    Invariants
    ----------

    We hold these truths to be self-evident in our code...
    The following are used in our code to positively assert
    truthful statements inside algorithms.  Don't use "assert",
    since that is possible to turn off, and we want these to always
    run.

    fun require(value: Boolean)
    Throws an IllegalArgumentException if the value is false.
    This is for asserting any kind of truth for an argument to a function.

    fun check(value: Boolean)
    Throws an IllegalStateException if the value is false.
    This is for asserting any kind of truth for a section of code in an algorithm.

    fun <T : Any> checkNotNull(value: T?): T
    Throws an IllegalStateException if the value is null.
    Otherwise returns the not null value.
    This is for asserting that code within an algorithm is not null.

    fun <T : Any> requireNotNull(value: T?): T
    Throws an IllegalArgumentException if the value is null.
    Otherwise returns the not null value.
    This is for asserting that arguments to a function aren't null.

    fun assert(value: Boolean)
    For JVM
    Throws an AssertionError if the value is false and runtime assertions
    have been enabled on the JVM using the -ea JVM option.
    (Maybe *not* best to use this, we want these invariants to always work)


    General architecture
    --------------------

    The general architecture pattern is to have various abilities provided in files with a
    suffix of "Utilities".  They, in turn, have access to a file with a suffix
    of "Persistence" which controls their access to the database, and which
    eventually talks to PureMemoryDatabase, where the data is actually stored.

    These constitute the business application.  We then provide an interface
    to this code from the outside world, like for example, by providing http
    access.

    Keeping things clean and simple is crucial.

    To stay organized, follow these guidelines:
        1) Calls from the outside world (e.g. the web) call into any of the
        "-Utilities" files.  They must not call directly to the "-Persistence"
        files or straight to the PureMemoryDatabase


    Pure Memory Database
    --------------------

    When dealing with the layer of the Pure Memory Database, some general design
    considerations must be maintained.
    1. The code in this layer is *solely* dedicated to CRUD details.  The only other
       logic to include is checking invariants - that is, making sure that certain
       fundamental truths are held true, for data that is readily available at this
       level.  There is no *exact* right way to do this, but in general we don't want
       general business logic occurring here.  For example, this is ok:

           fun addNewSession(sessionToken: String, user: User, time: DateTime) {
               require (sessions[sessionToken] == null) {"a session already exists for user (${user.name})"}
               sessions[sessionToken] = Pair(user, time)
           }

           fun removeSessionByToken(sessionToken: String) {
               checkNotNull(sessions[sessionToken]) {"Tried to delete session ($sessionToken) but it didn't exist in session database"}
               sessions.remove(sessionToken)
           }