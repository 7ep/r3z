buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    // lets us use kotlin
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"

    // provides unit test coverage
    id 'jacoco'

    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"

    // scans our code for static analysis
    id "org.sonarqube" version "2.8"
}

// useful to see the dependencies. 
// generate a report like this: gradlew htmldependencyreport
apply plugin: 'project-report'

// enables us to use Kotlin on the JVM
apply plugin: 'kotlin'

group 'com.coveros.r3z'
version ''

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src/main/kotlin']
    test.kotlin.srcDirs = test.java.srcDirs = ['src/test/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.resources.srcDirs = ['src/test/resources']
}

repositories {
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // or "kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC" // JVM dependency

    // junit, for running unit tests
    testImplementation ("junit:junit:4.13")
}

jar {
    manifest {
        attributes 'Main-Class': 'coverosR3z.server.MainKt'
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task uberJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'coverosR3z.MainKt'
    }
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

test {
    testLogging {
        exceptionFormat "full" // default is "short"
        // uncomment the following to see the unit test progress in the output
        //events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        events "passed", "skipped", "failed", "standardOut", "standardError"

        // set to false to disable detailed failure logs
        showExceptions true

        // enable to see standard out and error streams inline with the test results
        showStandardStreams true
    }

    // Fail the 'test' task on the first test failure
    failFast = true

    debugOptions {
        // make the following true if you want to attach with a debugger while testing
        enabled = false
        port = 4455
        server = true
        suspend = true
    }

    // generate a report on coverage
    finalizedBy jacocoTestReport
}

// Configure Jacoco, our code-coverage tool
jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        // enable a nice-looking HTML report
        html.destination file("${buildDir}/reports/jacoco")
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "$rootProject.name"
        property "sonar.projectName", "$rootProject.name"
        property "sonar.projectDescription", "An application to practice agile development with pair programming"
        property "sonar.sources", "src/main/kotlin"
        property "sonar.tests", "src/test/kotlin"
        property "sonar.kotlin.binaries", "build/classes/kotlin/main"
        property "sonar.junit.reportPaths", "build/test-results/test/"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml"
    }
}

// configure our general testing to always create a report
check.dependsOn(jacocoTestReport)