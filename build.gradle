plugins {
    // lets us use kotlin
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"

    // provides unit test coverage
    id 'jacoco'

    // scans our code for static analysis
    id "org.sonarqube" version "3.0"

    // Dependency Check analyzes the dependencies for
    // potential security issues.
    // see https://plugins.gradle.org/plugin/org.owasp.dependencycheck
    id "org.owasp.dependencycheck" version "6.0.3"

    // for generating documentation from the code
    id "org.jetbrains.dokka" version "1.4.20"
}

// enables us to use Kotlin on the JVM
apply plugin: 'kotlin'
apply plugin: 'application'

repositories {
    jcenter()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

// The following text is copy-pasted from Gradle's own repo
// for how to provide Kotlin with the necessary JDK directory.
// Yeah I know it's weird-looking, but it definitely works.
//
// copied from https://github.com/gradle/gradle/blob/master/subprojects/docs/src/snippets/java/toolchain-kotlin/groovy/build.gradle
//
// It allows a user to only have any java installed, and
// gradle will pull down the proper JDK if needed and use that
// for compiling Kotlin
// tag::compiler-kotlin[]
def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(11)
}

tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach {
    kotlinOptions.jdkHome = compiler.get().metadata.installationPath.asFile.absolutePath
}
// end::compiler-kotlin[]

group 'com.coveros.r3z'

// we'll use a variant of semantic versioning.
//
// The way it goes is, major, minor.
// if the major number changes, there's new functionality
// if the minor changes, it's only bugs fixed, non-functional improvements, or refactorings
version ''

sourceSets {
    main.kotlin.srcDirs = main.kotlin.srcDirs = ['src/main/kotlin']
    test.kotlin.srcDirs = test.kotlin.srcDirs = ['src/test/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.resources.srcDirs = ['src/test/resources']
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // junit, for running unit tests
    // https://mvnrepository.com/artifact/junit/junit/4.13.1
    testImplementation ("junit:junit:4.13.1")

    // Selenium - used for testing commonly-used browsers
    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'

    // https://github.com/bonigarcia/webdrivermanager
    testImplementation("io.github.bonigarcia:webdrivermanager:4.2.2")
}

// if you want to run this with gradle, just run
//      gradlew run
//
// and then you can hit http://localhost:12345 to see
// the application
application {
    mainClass.set('coverosR3z.MainKt')
}

sonarqube {
    properties {
        property "sonar.organization", "Byron Katz"
        property "sonar.projectKey", "$projectname"
        property "sonar.projectName", "$projectname"
        property "sonar.projectDescription", "Time recording web application"
        property "sonar.sources", "src/main/kotlin"
        property "sonar.tests", "src/test/kotlin"
        property "sonar.kotlin.binaries", "build/classes/kotlin/main"
        property "sonar.junit.reportPaths", "build/test-results/test/"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml"
    }
}

task checkQualityGate() {
    doLast {
        isQualityGateGood()
    }
}

// throws an exception if the quality gate fails.
static void isQualityGateGood() {
    URL url = new URL("http://localhost:9000/api/qualitygates/project_status?projectKey=r3z")
    HttpURLConnection connection = (HttpURLConnection) url.openConnection()
    connection.setRequestMethod("GET")
    connection.connect()
    int code = connection.getResponseCode()
    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))
    String strCurrentLine
    while ((strCurrentLine = br.readLine()) != null) {
        // ha ha no need to parse JSON!
        print(strCurrentLine)
        if (strCurrentLine.startsWith("{\"projectStatus\":{\"status\":\"ERROR\"")) {
            throw new GradleException("The quality gate for Demo on Sonarqube failed.  Check Sonarqube.")
        }
    }
    if (code != 200) {
        throw new GradleException("response from Sonar was " + code)
    }
}

dependencyCheck {
    // if we don't include the specific configurations to scan, it will scan everything,
    // which means getting into the dependencies of tomcat and jetty, which should
    // have no bearing on us.
    scanConfigurations = ['default']
    showSummary = false
    autoUpdate = true
    cveValidForHours = 24 * 30 * 12 // about a year.
    format = 'HTML' // options are  (HTML, XML, CSV, JSON, VULN, ALL).
    failBuildOnCVSS = 8 // see https://www.first.org/cvss/specification-document#5-Qualitative-Severity-Rating-Scale
}

task('printReportPathsDependencyCheck') {
    doLast {
        print "\n\n\n"
        println "---------------------------------------------------------------"
        println "Reports were generated by the tests."
        println "---------------------------------------------------------------"
        println ""
        println "Dependency Check: build/reports/dependency-check-report.html"
        println "---------------------------------------------------------------"
        print "\n"
    }
}

dependencyCheckAnalyze.finalizedBy 'printReportPathsDependencyCheck'

// if you run
//    gradlew jar
// you are given a jar file at build/libs/r3z.jar
// which you can run with
//     java -jar build/libs/r3z.jar
jar {
    manifest {
        attributes(
                'Main-Class': 'coverosR3z.MainKt',
                "Implementation-Title": "Gradle",
                "Implementation-Version": "$r3z_version",
                )

    }
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

test {

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    jacoco {
      includes = ['coverosR3z.*']
    }

    // to run just the non-ui tests, run gradlew test -Pnoui
    if (project.hasProperty('noui')) {
        exclude '**/uitests*'
    }

    // to run just the ui tests, run gradlew test -Pjustui
    if (project.hasProperty('justui')) {
        include 'coverosR3z/uitests/**'
    }

    testLogging {
        exceptionFormat "full" // options are "full", "short". default is "short"
        // uncomment the following to see the unit test progress in the output
        //events "started", "passed", "skipped", "failed", "standardOut", "standardError"

        // set to false to disable detailed failure logs
        showExceptions true

        // enable to see standard out and error streams inline with the test results
        showStandardStreams false
    }

    // Fail the 'test' task on the first test failure
    failFast = true

    debugOptions {
        // make the following true if you want to attach with a debugger while testing
        enabled = false
        port = 4455
        server = true
        suspend = true
    }

    // generate a report on coverage
    finalizedBy jacocoTestReport
}

// Configure Jacoco, our code-coverage tool
jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        // enable a nice-looking HTML report
        html.destination file("${buildDir}/reports/jacoco")
    }
}

// configure our general testing to always create a report
check.dependsOn(jacocoTestReport)

/**
 * Put the current Git commit sha in a file accessible while running.
 */
task('writeGitCommitToFile') {
    File file = new File("src/main/resources/static/commit.html")
    String contents = "Version: " + "$r3z_version" + "\nCommit sha: " + getCurrentGitHash()
    file.write(contents)
}

/**
 * This gnarly little method gets the current commit.  It's really a simple-minded
 * approach, which makes it easy to read but maybe likely to fail?  time will tell.
 */
static String getCurrentGitHash() {
    String headFileLocation = ".git/HEAD"
    String commitLocation = ""
    int locationOfSpace
    String currentHead
    FileReader fr_forGitHead
    FileReader fr_forGitHash
    String result = "EMPTY_INITIAL_VALUE"
    boolean shouldExit = false

    try {
        fr_forGitHead = new FileReader(headFileLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HEAD_FOUND"
    }

    new BufferedReader(fr_forGitHead).with { br ->
        // get the directory to the current HEAD
        result = "EMPTY_INITIAL_VALUE"
        try {
            currentHead = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_HEAD_FILE"
            shouldExit = true
        }
        finally {
            br.close()
        }
        locationOfSpace = currentHead.indexOf(" ")
        // extract out the portion that is the directory only
        // the whole contents go something like: "ref: refs/heads/master"
        commitLocation = currentHead.substring(locationOfSpace + 1)
        // read the file at that location (e.g. .git/refs/heads/master )
    }
    if (shouldExit) {
        return result
    }

    try {
        fr_forGitHash = new FileReader(".git/" + commitLocation)
    } catch (Exception ignored) {
        return "NO_GIT_HASH_FILE_FOUND"
    }

    new BufferedReader(fr_forGitHash).with { br ->
        result = "EMPTY_AT_BEGINNING"
        try {
            result = br.readLine()
        } catch (Exception ignored) {
            result = "COULD_NOT_READ_COMMIT_HASH"
        } finally {
            br.close()
        }
    }
    return result
}

compileKotlin.finalizedBy writeGitCommitToFile
