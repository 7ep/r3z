buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    // lets us use kotlin
    id "org.jetbrains.kotlin.jvm" version "1.3.72"

    // provides unit test coverage
    id 'jacoco'
}

// useful to see the dependencies. 
// generate a report like this: gradlew htmldependencyreport
apply plugin: 'project-report'

// enables us to use Kotlin on the JVM
apply plugin: 'kotlin'

// enables us to build "war" files for Servlet containers
apply plugin: 'war'

// following is necessary to build a war properly
// it follows the servlet conventions so Servlet
// containers like Tomcat and Jetty work property
// with a "war" file built from this.
webAppDirName = 'src/main/resources/webapp'

group 'com.coveros.r3z'
version '0.0.1-SNAPSHOT'

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src/main/kotlin']
    test.kotlin.srcDirs = test.java.srcDirs = ['src/test/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.resources.srcDirs = ['src/test/resources']
}

repositories {
    jcenter()
}

dependencies {
    // necessary to use kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // junit, for running unit tests
    testImplementation ("junit:junit:4.13")
}


test {
    testLogging {
        exceptionFormat "full" // default is "short"
        // uncomment the following to see the unit test progress in the output
        //events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        events "passed", "skipped", "failed", "standardOut", "standardError"

        // set to false to disable detailed failure logs
        showExceptions true

        // enable to see standard out and error streams inline with the test results
        showStandardStreams true
    }

    // Fail the 'test' task on the first test failure
    failFast = false

    debugOptions {
        // make the following true if you want to attach with a debugger while testing
        enabled = false
        port = 4455
        server = true
        suspend = true
    }

    // generate a report on coverage
    finalizedBy jacocoTestReport
}

// Configure Jacoco, our code-coverage tool
jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        // enable a nice-looking HTML report
        html.destination file("${buildDir}/reports/jacoco")
    }
}

// configure our general testing to always create a report
check.dependsOn(jacocoTestReport)