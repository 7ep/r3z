buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    // provides unit test coverage
    id 'jacoco'

    // provides access to a database versioning tool.
    id "org.flywaydb.flyway" version "6.4.1"
}

// enables us to use Kotlin on the JVM
apply plugin: 'kotlin'

// enables us to build "war" files for Servlet containers
apply plugin: 'war'
// following is necessary to build a war properly
// it follows the servlet conventions so Servlet
// containers like Tomcat and Jetty work property
// with a "war" file built from this.
webAppDirName = 'src/main/resources/webapp'

// enables us to run this with an embedded server
// from the command line
apply plugin: 'application'
mainClassName = "io.ktor.server.jetty.EngineMain"

group 'com.coveros.r3z'
version '0.0.1-SNAPSHOT'

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src/main/kotlin']
    test.kotlin.srcDirs = test.java.srcDirs = ['src/test/kotlin']
    main.resources.srcDirs = ['src/main/resources']
    test.resources.srcDirs = ['src/test/resources']
}

repositories {
    jcenter()
}

dependencies {
    // Ktor - a web application framework from Jetbrains, maker of Kotlin
    implementation "io.ktor:ktor-server-jetty:$ktor_version"

    // provides logging for the program
    implementation "ch.qos.logback:logback-classic:$logback_version"

    // provides templating - for example, HTML templates
    implementation "io.ktor:ktor-freemarker:$ktor_version"

    // enables running tests directly against the running server
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"

    // junit, for running unit tests
    testImplementation ("junit:junit:4.13")

    // https://mockk.io/#gradlemaven-dependency
    // this tool is used to mock stuff for our unit tests
    testImplementation "io.mockk:mockk:1.10.0"

    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    // also see https://github.com/brettwooldridge/HikariCP
    // a connection pool for our database.  This should enable
    // a much faster communication to any database that is used.
    implementation ("com.zaxxer:HikariCP:3.4.5")

    // we'll use this as our database
    // https://mvnrepository.com/artifact/com.h2database/h2
    implementation ("com.h2database:h2:1.4.199")

    // provide database migrations - see https://flywaydb.org/
    implementation ("org.flywaydb:flyway-core:6.4.1")
}


// Configure our javadoc to include an overview for our project, a
// document that provides general ideas of the whole.
javadoc {
    options.overview = "src/main/javadoc/overview.html"
}

// configuration for when we run the program as an application from the command line
application {
    applicationDefaultJvmArgs = [
            '-Dcom.sun.management.jmxremote',
            '-Dcom.sun.management.jmxremote.port=9999',
            '-Dcom.sun.management.jmxremote.ssl=false',
            '-Dcom.sun.management.jmxremote.authenticate=false',
            '-Xms256m',
            '-Xmx256m'
    ]
}

// Configure Jacoco, our code-coverage tool
jacocoTestReport {
    executionData(fileTree(dir: "$buildDir/jacoco", include: '*.exec'))
    reports {
        xml.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/jacoco/jacoco.xml")
        // enable a nice-looking HTML report
        html.destination file("${buildDir}/reports/jacoco")
    }
}

// configure our general testing to always create a report
check.dependsOn(jacocoTestReport)